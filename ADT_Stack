ADT Stack {
	数据对象:D = {a[i] | a[i]->ElemSet, i = 1,2,...,n, n>=0}
	数据关系:R = {<a[i-1], a[i]> | a[i-1], a[i]->D, i = 2,...,n}
			约定a[n]端为栈顶,a[1]为栈底
	基本操作:
			InitStack(&S)
		操作结果:构造一个空栈S。
			DestoryStack(&S)
		初始条件:栈 S 已存在。
		操作结果:栈 S 已被销毁。
			ClearStack(&S)
		初始条件:栈 S 已存在。
		操作结果:将 S 清为空栈。
			StackEmpty(S)
		初始条件:栈 S 已存在。
		操作结果:若栈 S 为空栈, 返回TRUE, 否则返回FALSE。
			StackLength(S)
		初始条件:栈 S 已存在。
		操作结果:返回 S 的元素的个数, 即栈的长度。
			GetTop(S, &e)
		初始条件:栈 S 已存在。
		操作结果:用 e 返回栈 S 的栈顶元素。
			Push(&S, e)
		初始条件:栈 S 已存在。
		操作结果:插入元素 e 为新的栈顶元素。
			Pop(&S, &e)
		初始条件:栈 S 已存在。
		操作结果:删除 S 的栈顶元素, 并用 e 返回其值。
			StackTraverse(S, visit())
		初始条件:栈 S 已存在且非空。
		操作结果:从栈底到栈顶依次对 S 的每个数据元素调用函数 visit()。一旦visit()失败, 操作失败。
}ADT Stack



顺序栈
	设定两个常量: STACK_INIT_SIZE(存储空间初始分配量)
				 STACKINCREMENT(存储空间分配增量)


	#define STACK_INIT_SIZE 100
	#define STACKINCREMENT  10

	typedef struct 
	{
		SElemType *base;	//栈底指针,NULL为栈不存在[构造和销毁之后]
		SElemType *top;		//栈顶指针 当top-base=stacksize,栈满 
		int stacksize;		//当前已分配的存储空间,以元素为单位
	}SqStack;
	




	//----基本操作算法描述----//

	Status InitStack (SqStack &S)
	{
		//构造一个空栈//
		S.base = (SElemType *) malloc (STACK_INIT_SIZE * sizeof(SElemType));
		if (! S.base) exit (OVERFLOW);
		S.top = S.base;
		S.stacksize = STACK_INIT_SIZE;
		return OK;
	}/*InitStack*/

	Status DestoryStack (SqStack &S)
	{
		//销毁栈S, S不再存在。
	}

	Status ClearStack (SqStack &S)
	{
		//把 S 置为空栈。
	}

	Status StackEmpty (SqStack S)
	{
		//若 S 为空栈, 则返回TRUE, 否则返回FALSE。
	}

	int StackLength (SqStack S)
	{
		//返回 S 的元素的个数, 即栈的长度。
	}

	Status GetTop (SqStack &S, SElemType &e)
	{
		//若栈不为空, 则用 e 返回 S 的栈顶元素, 并返回OK; 否则返回ERROR
		if (S.top == S.base) return ERROR;
		e = *(S.top - 1);
		return OK;
	}//GetTop

	Status Push (SqStack &S, SElemType e)
	{
		//插入 e 为新的栈顶元素//
		if(S.top - S.base >= S.stacksize)
		{
			//栈满, 追加存储空间//
			S.base = (SElemSet *) realloc (S.base, (S.stacksize + STACKINCREMENT) * sizeof (SElemType));
			if (! S.base) exit (OVERFLOW);//存储分配失败//

			S.top = S.base + stacksize;
			stacksize += STACKINCREMENT;
		}
		*S.top ++ = e;
		return OK;
	}

	Status Pop (SqStack &S, SElemType &e)
	{
		//若栈不空, 则删除 S 的栈顶元素, 并用 e 返回其值, 并返回OK; 否则返回ERROR。
		if (S.top == S.base) return ERROR;
		e = * --S.top;
		return OK;
	}//Pop

	Status StackTraverse(SqStack S, Status (*visit))
	{
		//从栈底到栈顶依次对栈中每一个元素调用函数visit()。一旦调用失败, 则操作失败。
	}
